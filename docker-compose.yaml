version: "3.8"

services:
  # API Gateway
  api-gateway:
    build: ./api-gateway
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - GIN_MODE=debug
      - AUTH_SERVICE_URL=http://auth:8081
      - USER_SERVICE_URL=http://user:8082
      - FEEDBACK_SERVICE_URL=http://feedback:8083
      - REWARD_SERVICE_URL=http://reward:8084
      - INVENTORY_SERVICE_URL=http://inventory:8085
      - ARTICLE_SERVICE_URL=http://article:8086
      - NOTIFICATION_SERVICE_URL=http://notification:8087
      - JWT_SECRET=your-jwt-secret-key
    depends_on:
      - auth
      - user
      - feedback
      - reward
      - inventory
      - article
      - notification
    networks:
      - lrt-network

  # Auth Service
  auth:
    build: ./services/auth
    ports:
      - "8081:8081"
    environment:
      - PORT=8081
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=auth_db
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - JWT_SECRET=your-jwt-secret-key
      - JWT_EXPIRY=24h
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - lrt-network

  # User Service
  user:
    build: ./services/user
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=user_db
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - lrt-network

  # Feedback Service
  feedback:
    build: ./services/feedback
    ports:
      - "8083:8083"
    environment:
      - PORT=8083
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=feedback_db
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - JWT_SECRET=your-jwt-secret-key
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - lrt-network

  # Reward Service
  reward:
    build: ./services/reward
    ports:
      - "8084:8084"
    environment:
      - PORT=8084
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=reward_db
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - JWT_SECRET=your-jwt-secret-key
      - USER_SERVICE_URL=http://user:8082
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - lrt-network

  # Inventory Service
  inventory:
    build: ./services/inventory
    ports:
      - "8085:8085"
    environment:
      - PORT=8085
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=inventory_db
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - JWT_SECRET=your-jwt-secret-key
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - lrt-network

  # Article Service
  article:
    build: ./services/article
    ports:
      - "8086:8086"
    environment:
      - PORT=8086
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=article_db
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - JWT_SECRET=your-jwt-secret-key
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - lrt-network

  # Notification Service
  notification:
    build: ./services/notification
    ports:
      - "8087:8087"
    environment:
      - PORT=8087
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=notification_db
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - JWT_SECRET=your-jwt-secret-key
      - SMTP_HOST=maildev
      - SMTP_PORT=25
      - SMTP_USER=
      - SMTP_PASSWORD=
      - SMTP_FROM=noreply@lrt-crm.com
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      maildev:
        condition: service_started
    networks:
      - lrt-network

  # Single Postgres Database
  postgres:
    image: postgres:alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=auth_db,user_db,feedback_db,reward_db,inventory_db,article_db,notification_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - lrt-network

  # Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lrt-network

  # Email Server for Testing
  maildev:
    image: maildev/maildev
    ports:
      - "1080:1080" # Web interface
      - "1025:25" # SMTP
    networks:
      - lrt-network

networks:
  lrt-network:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq-data:
